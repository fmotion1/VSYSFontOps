<!DOCTYPE html>
<html data-lt-installed="true"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
      <title>Python-Fontbro</title>
      <meta charset="utf-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      
      <style data-tippy-stylesheet="">.tippy-tooltip[data-animation=fade][data-state=hidden]{opacity:0}.tippy-iOS{cursor:pointer!important;-webkit-tap-highlight-color:transparent}.tippy-popper{pointer-events:none;max-width:calc(100vw - 10px);transition-timing-function:cubic-bezier(.165,.84,.44,1);transition-property:transform}.tippy-tooltip{position:relative;color:#fff;border-radius:4px;font-size:14px;line-height:1.4;background-color:#333;transition-property:visibility,opacity,transform;outline:0}.tippy-tooltip[data-placement^=top]>.tippy-arrow{border-width:8px 8px 0;border-top-color:#333;margin:0 3px;transform-origin:50% 0;bottom:-7px}.tippy-tooltip[data-placement^=bottom]>.tippy-arrow{border-width:0 8px 8px;border-bottom-color:#333;margin:0 3px;transform-origin:50% 7px;top:-7px}.tippy-tooltip[data-placement^=left]>.tippy-arrow{border-width:8px 0 8px 8px;border-left-color:#333;margin:3px 0;transform-origin:0 50%;right:-7px}.tippy-tooltip[data-placement^=right]>.tippy-arrow{border-width:8px 8px 8px 0;border-right-color:#333;margin:3px 0;transform-origin:7px 50%;left:-7px}.tippy-tooltip[data-interactive][data-state=visible]{pointer-events:auto}.tippy-tooltip[data-inertia][data-state=visible]{transition-timing-function:cubic-bezier(.54,1.5,.38,1.11)}.tippy-arrow{position:absolute;border-color:transparent;border-style:solid}.tippy-content{padding:5px 9px}</style><link rel="stylesheet" href="Python-Fontbro_files/katex.min.css">
      
      
      
      
      
      
      
      
      
      <style>
      /**
 * prism.js Github theme based on GitHub's theme.
 * @author Sam Clarke
 */
code[class*="language-"],
pre[class*="language-"] {
  color: #333;
  background: none;
  font-family: Consolas, "Liberation Mono", Menlo, Courier, monospace;
  text-align: left;
  white-space: pre;
  word-spacing: normal;
  word-break: normal;
  word-wrap: normal;
  line-height: 1.4;

  -moz-tab-size: 8;
  -o-tab-size: 8;
  tab-size: 8;

  -webkit-hyphens: none;
  -moz-hyphens: none;
  -ms-hyphens: none;
  hyphens: none;
}

/* Code blocks */
pre[class*="language-"] {
  padding: .8em;
  overflow: auto;
  /* border: 1px solid #ddd; */
  border-radius: 3px;
  /* background: #fff; */
  background: #f5f5f5;
}

/* Inline code */
:not(pre) > code[class*="language-"] {
  padding: .1em;
  border-radius: .3em;
  white-space: normal;
  background: #f5f5f5;
}

.token.comment,
.token.blockquote {
  color: #969896;
}

.token.cdata {
  color: #183691;
}

.token.doctype,
.token.punctuation,
.token.variable,
.token.macro.property {
  color: #333;
}

.token.operator,
.token.important,
.token.keyword,
.token.rule,
.token.builtin {
  color: #a71d5d;
}

.token.string,
.token.url,
.token.regex,
.token.attr-value {
  color: #183691;
}

.token.property,
.token.number,
.token.boolean,
.token.entity,
.token.atrule,
.token.constant,
.token.symbol,
.token.command,
.token.code {
  color: #0086b3;
}

.token.tag,
.token.selector,
.token.prolog {
  color: #63a35c;
}

.token.function,
.token.namespace,
.token.pseudo-element,
.token.class,
.token.class-name,
.token.pseudo-class,
.token.id,
.token.url-reference .token.variable,
.token.attr-name {
  color: #795da3;
}

.token.entity {
  cursor: help;
}

.token.title,
.token.title .token.punctuation {
  font-weight: bold;
  color: #1d3e81;
}

.token.list {
  color: #ed6a43;
}

.token.inserted {
  background-color: #eaffea;
  color: #55a532;
}

.token.deleted {
  background-color: #ffecec;
  color: #bd2c00;
}

.token.bold {
  font-weight: bold;
}

.token.italic {
  font-style: italic;
}


/* JSON */
.language-json .token.property {
  color: #183691;
}

.language-markup .token.tag .token.punctuation {
  color: #333;
}

/* CSS */
code.language-css,
.language-css .token.function {
  color: #0086b3;
}

/* YAML */
.language-yaml .token.atrule {
  color: #63a35c;
}

code.language-yaml {
  color: #183691;
}

/* Ruby */
.language-ruby .token.function {
  color: #333;
}

/* Markdown */
.language-markdown .token.url {
  color: #795da3;
}

/* Makefile */
.language-makefile .token.symbol {
  color: #795da3;
}

.language-makefile .token.variable {
  color: #183691;
}

.language-makefile .token.builtin {
  color: #0086b3;
}

/* Bash */
.language-bash .token.keyword {
  color: #0086b3;
}

/* highlight */
pre[data-line] {
  position: relative;
  padding: 1em 0 1em 3em;
}
pre[data-line] .line-highlight-wrapper {
  position: absolute;
  top: 0;
  left: 0;
  background-color: transparent;
  display: block;
  width: 100%;
}

pre[data-line] .line-highlight {
  position: absolute;
  left: 0;
  right: 0;
  padding: inherit 0;
  margin-top: 1em;
  background: hsla(24, 20%, 50%,.08);
  background: linear-gradient(to right, hsla(24, 20%, 50%,.1) 70%, hsla(24, 20%, 50%,0));
  pointer-events: none;
  line-height: inherit;
  white-space: pre;
}

pre[data-line] .line-highlight:before, 
pre[data-line] .line-highlight[data-end]:after {
  content: attr(data-start);
  position: absolute;
  top: .4em;
  left: .6em;
  min-width: 1em;
  padding: 0 .5em;
  background-color: hsla(24, 20%, 50%,.4);
  color: hsl(24, 20%, 95%);
  font: bold 65%/1.5 sans-serif;
  text-align: center;
  vertical-align: .3em;
  border-radius: 999px;
  text-shadow: none;
  box-shadow: 0 1px white;
}

pre[data-line] .line-highlight[data-end]:after {
  content: attr(data-end);
  top: auto;
  bottom: .4em;
}html body{font-family:"Helvetica Neue",Helvetica,"Segoe UI",Arial,freesans,sans-serif;font-size:16px;line-height:1.6;color:#333;background-color:#fff;overflow:initial;box-sizing:border-box;word-wrap:break-word}html body>:first-child{margin-top:0}html body h1,html body h2,html body h3,html body h4,html body h5,html body h6{line-height:1.2;margin-top:1em;margin-bottom:16px;color:#000}html body h1{font-size:2.25em;font-weight:300;padding-bottom:.3em}html body h2{font-size:1.75em;font-weight:400;padding-bottom:.3em}html body h3{font-size:1.5em;font-weight:500}html body h4{font-size:1.25em;font-weight:600}html body h5{font-size:1.1em;font-weight:600}html body h6{font-size:1em;font-weight:600}html body h1,html body h2,html body h3,html body h4,html body h5{font-weight:600}html body h5{font-size:1em}html body h6{color:#5c5c5c}html body strong{color:#000}html body del{color:#5c5c5c}html body a:not([href]){color:inherit;text-decoration:none}html body a{color:#08c;text-decoration:none}html body a:hover{color:#00a3f5;text-decoration:none}html body img{max-width:100%}html body>p{margin-top:0;margin-bottom:16px;word-wrap:break-word}html body>ul,html body>ol{margin-bottom:16px}html body ul,html body ol{padding-left:2em}html body ul.no-list,html body ol.no-list{padding:0;list-style-type:none}html body ul ul,html body ul ol,html body ol ol,html body ol ul{margin-top:0;margin-bottom:0}html body li{margin-bottom:0}html body li.task-list-item{list-style:none}html body li>p{margin-top:0;margin-bottom:0}html body .task-list-item-checkbox{margin:0 .2em .25em -1.8em;vertical-align:middle}html body .task-list-item-checkbox:hover{cursor:pointer}html body blockquote{margin:16px 0;font-size:inherit;padding:0 15px;color:#5c5c5c;background-color:#f0f0f0;border-left:4px solid #d6d6d6}html body blockquote>:first-child{margin-top:0}html body blockquote>:last-child{margin-bottom:0}html body hr{height:4px;margin:32px 0;background-color:#d6d6d6;border:0 none}html body table{margin:10px 0 15px 0;border-collapse:collapse;border-spacing:0;display:block;width:100%;overflow:auto;word-break:normal;word-break:keep-all}html body table th{font-weight:bold;color:#000}html body table td,html body table th{border:1px solid #d6d6d6;padding:6px 13px}html body dl{padding:0}html body dl dt{padding:0;margin-top:16px;font-size:1em;font-style:italic;font-weight:bold}html body dl dd{padding:0 16px;margin-bottom:16px}html body code{font-family:Menlo,Monaco,Consolas,'Courier New',monospace;font-size:.85em !important;color:#000;background-color:#f0f0f0;border-radius:3px;padding:.2em 0}html body code::before,html body code::after{letter-spacing:-0.2em;content:"\00a0"}html body pre>code{padding:0;margin:0;font-size:.85em !important;word-break:normal;white-space:pre;background:transparent;border:0}html body .highlight{margin-bottom:16px}html body .highlight pre,html body pre{padding:1em;overflow:auto;font-size:.85em !important;line-height:1.45;border:#d6d6d6;border-radius:3px}html body .highlight pre{margin-bottom:0;word-break:normal}html body pre code,html body pre tt{display:inline;max-width:initial;padding:0;margin:0;overflow:initial;line-height:inherit;word-wrap:normal;background-color:transparent;border:0}html body pre code:before,html body pre tt:before,html body pre code:after,html body pre tt:after{content:normal}html body p,html body blockquote,html body ul,html body ol,html body dl,html body pre{margin-top:0;margin-bottom:16px}html body kbd{color:#000;border:1px solid #d6d6d6;border-bottom:2px solid #c7c7c7;padding:2px 4px;background-color:#f0f0f0;border-radius:3px}@media print{html body{background-color:#fff}html body h1,html body h2,html body h3,html body h4,html body h5,html body h6{color:#000;page-break-after:avoid}html body blockquote{color:#5c5c5c}html body pre{page-break-inside:avoid}html body table{display:table}html body img{display:block;max-width:100%;max-height:100%}html body pre,html body code{word-wrap:break-word;white-space:pre}}.markdown-preview{width:100%;height:100%;box-sizing:border-box}.markdown-preview .pagebreak,.markdown-preview .newpage{page-break-before:always}.markdown-preview pre.line-numbers{position:relative;padding-left:3.8em;counter-reset:linenumber}.markdown-preview pre.line-numbers>code{position:relative}.markdown-preview pre.line-numbers .line-numbers-rows{position:absolute;pointer-events:none;top:1em;font-size:100%;left:0;width:3em;letter-spacing:-1px;border-right:1px solid #999;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.markdown-preview pre.line-numbers .line-numbers-rows>span{pointer-events:none;display:block;counter-increment:linenumber}.markdown-preview pre.line-numbers .line-numbers-rows>span:before{content:counter(linenumber);color:#999;display:block;padding-right:.8em;text-align:right}.markdown-preview .mathjax-exps .MathJax_Display{text-align:center !important}.markdown-preview:not([for="preview"]) .code-chunk .btn-group{display:none}.markdown-preview:not([for="preview"]) .code-chunk .status{display:none}.markdown-preview:not([for="preview"]) .code-chunk .output-div{margin-bottom:16px}.markdown-preview .md-toc{padding:0}.markdown-preview .md-toc .md-toc-link-wrapper .md-toc-link{display:inline;padding:.25rem 0}.markdown-preview .md-toc .md-toc-link-wrapper .md-toc-link p,.markdown-preview .md-toc .md-toc-link-wrapper .md-toc-link div{display:inline}.markdown-preview .md-toc .md-toc-link-wrapper.highlighted .md-toc-link{font-weight:800}.scrollbar-style::-webkit-scrollbar{width:8px}.scrollbar-style::-webkit-scrollbar-track{border-radius:10px;background-color:transparent}.scrollbar-style::-webkit-scrollbar-thumb{border-radius:5px;background-color:rgba(150,150,150,0.66);border:4px solid rgba(150,150,150,0.66);background-clip:content-box}html body[for="html-export"]:not([data-presentation-mode]){position:relative;width:100%;height:100%;top:0;left:0;margin:0;padding:0;overflow:auto}html body[for="html-export"]:not([data-presentation-mode]) .markdown-preview{position:relative;top:0}@media screen and (min-width:914px){html body[for="html-export"]:not([data-presentation-mode]) .markdown-preview{padding:2em calc(50% - 457px + 2em)}}@media screen and (max-width:914px){html body[for="html-export"]:not([data-presentation-mode]) .markdown-preview{padding:2em}}@media screen and (max-width:450px){html body[for="html-export"]:not([data-presentation-mode]) .markdown-preview{font-size:14px !important;padding:1em}}@media print{html body[for="html-export"]:not([data-presentation-mode]) #sidebar-toc-btn{display:none}}html body[for="html-export"]:not([data-presentation-mode]) #sidebar-toc-btn{position:fixed;bottom:8px;left:8px;font-size:28px;cursor:pointer;color:inherit;z-index:99;width:32px;text-align:center;opacity:.4}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] #sidebar-toc-btn{opacity:1}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .md-sidebar-toc{position:fixed;top:0;left:0;width:300px;height:100%;padding:32px 0 48px 0;font-size:14px;box-shadow:0 0 4px rgba(150,150,150,0.33);box-sizing:border-box;overflow:auto;background-color:inherit}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .md-sidebar-toc::-webkit-scrollbar{width:8px}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .md-sidebar-toc::-webkit-scrollbar-track{border-radius:10px;background-color:transparent}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .md-sidebar-toc::-webkit-scrollbar-thumb{border-radius:5px;background-color:rgba(150,150,150,0.66);border:4px solid rgba(150,150,150,0.66);background-clip:content-box}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .md-sidebar-toc a{text-decoration:none}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .md-sidebar-toc .md-toc{padding:0 16px}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .md-sidebar-toc .md-toc .md-toc-link-wrapper .md-toc-link{display:inline;padding:.25rem 0}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .md-sidebar-toc .md-toc .md-toc-link-wrapper .md-toc-link p,html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .md-sidebar-toc .md-toc .md-toc-link-wrapper .md-toc-link div{display:inline}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .md-sidebar-toc .md-toc .md-toc-link-wrapper.highlighted .md-toc-link{font-weight:800}html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .markdown-preview{left:300px;width:calc(100% -  300px);padding:2em calc(50% - 457px -  300px/2);margin:0;box-sizing:border-box}@media screen and (max-width:1274px){html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .markdown-preview{padding:2em}}@media screen and (max-width:450px){html body[for="html-export"]:not([data-presentation-mode])[html-show-sidebar-toc] .markdown-preview{width:100%}}html body[for="html-export"]:not([data-presentation-mode]):not([html-show-sidebar-toc]) .markdown-preview{left:50%;transform:translateX(-50%)}html body[for="html-export"]:not([data-presentation-mode]):not([html-show-sidebar-toc]) .md-sidebar-toc{display:none}
/* Please visit the URL below for more information: */
/*   https://shd101wyy.github.io/markdown-preview-enhanced/#/customize-css */

      </style>
    </head>
    <body for="html-export">
      <div class="mume markdown-preview  ">
      <h1 class="mume-header" id="python-fontbro">python-fontbro</h1>

<p>Friendly font operations on top of <code>fontTools</code>.</p>
<h2 class="mume-header" id="usage">Usage</h2>

<pre data-role="codeBlock" data-info="python" class="language-python"><span class="token keyword keyword-from">from</span> fontbro <span class="token keyword keyword-import">import</span> Font
font <span class="token operator">=</span> Font<span class="token punctuation">(</span><span class="token string">"fonts/MyFont.ttf"</span><span class="token punctuation">)</span>
</pre><h2 class="mume-header" id="methods">Methods</h2>

<p><a href="https://pypi.org/project/python-fontbro/#clone"><code>clone</code></a></p>
<p><a href="https://pypi.org/project/python-fontbro/#close"><code>close</code></a></p>
<p><a href="https://pypi.org/project/python-fontbro/#get_characters"><code>get_characters</code></a></p>
<p><a href="https://pypi.org/project/python-fontbro/#get_characters_count"><code>get_characters_count</code></a></p>
<p><a href="https://pypi.org/project/python-fontbro/#get_features"><code>get_features</code></a></p>
<p><a href="https://pypi.org/project/python-fontbro/#get_features_tags"><code>get_features_tags</code></a></p>
<p><a href="https://pypi.org/project/python-fontbro/#get_format"><code>get_format</code></a></p>
<p><a href="https://pypi.org/project/python-fontbro/#get_fingerprint"><code>get_fingerprint</code></a></p>
<p><a href="https://pypi.org/project/python-fontbro/#get_fingerprint_match"><code>get_fingerprint_match</code></a></p>
<p><a href="https://pypi.org/project/python-fontbro/#get_glyphs"><code>get_glyphs</code></a></p>
<p><a href="https://pypi.org/project/python-fontbro/#get_glyphs_count"><code>get_glyphs_count</code></a></p>
<p><a href="https://pypi.org/project/python-fontbro/#get_image"><code>get_image</code></a></p>
<p><a href="https://pypi.org/project/python-fontbro/#get_italic_angle"><code>get_italic_angle</code></a></p>
<p><a href="https://pypi.org/project/python-fontbro/#get_name"><code>get_name</code></a></p>
<p><a href="https://pypi.org/project/python-fontbro/#get_names"><code>get_names</code></a></p>
<p><a href="https://pypi.org/project/python-fontbro/#get_style_flag"><code>get_style_flag</code></a></p>
<p><a href="https://pypi.org/project/python-fontbro/#get_style_flags"><code>get_style_flags</code></a></p>
<p><a href="https://pypi.org/project/python-fontbro/#get_ttfont"><code>get_ttfont</code></a></p>
<p><a href="https://pypi.org/project/python-fontbro/#get_unicode_block_by_name"><code>get_unicode_block_by_name</code></a></p>
<p><a href="https://pypi.org/project/python-fontbro/#get_unicode_blocks"><code>get_unicode_blocks</code></a></p>
<p><a href="https://pypi.org/project/python-fontbro/#get_unicode_script_by_name"><code>get_unicode_script_by_name</code></a></p>
<p><a href="https://pypi.org/project/python-fontbro/#get_unicode_scripts"><code>get_unicode_scripts</code></a></p>
<p><a href="https://pypi.org/project/python-fontbro/#get_variable_axes"><code>get_variable_axes</code></a></p>
<p><a href="https://pypi.org/project/python-fontbro/#get_variable_axes_tags"><code>get_variable_axes_tags</code></a></p>
<p><a href="https://pypi.org/project/python-fontbro/#get_variable_axis_by_tag"><code>get_variable_axis_by_tag</code></a></p>
<p><a href="https://pypi.org/project/python-fontbro/#get_variable_instances"><code>get_variable_instances</code></a></p>
<p><a href="https://pypi.org/project/python-fontbro/#get_variable_instance_closest_to_coordinates"><code>get_variable_instance_closest_to_coordinates</code></a></p>
<p><a href="https://pypi.org/project/python-fontbro/#get_version"><code>get_version</code></a></p>
<p><a href="https://pypi.org/project/python-fontbro/#get_weight"><code>get_weight</code></a></p>
<p><a href="https://pypi.org/project/python-fontbro/#get_width"><code>get_width</code></a></p>
<p><a href="https://pypi.org/project/python-fontbro/#is_static"><code>is_static</code></a></p>
<p><a href="https://pypi.org/project/python-fontbro/#is_variable"><code>is_variable</code></a></p>
<p><a href="https://pypi.org/project/python-fontbro/#rename"><code>rename</code></a></p>
<p><a href="https://pypi.org/project/python-fontbro/#save"><code>save</code></a></p>
<p><a href="https://pypi.org/project/python-fontbro/#save_as_woff"><code>save_as_woff</code></a></p>
<p><a href="https://pypi.org/project/python-fontbro/#save_as_woff2"><code>save_as_woff2</code></a></p>
<p><a href="https://pypi.org/project/python-fontbro/#set_name"><code>set_name</code></a></p>
<p><a href="https://pypi.org/project/python-fontbro/#set_names"><code>set_names</code></a></p>
<p><a href="https://pypi.org/project/python-fontbro/#set_style_flag"><code>set_style_flag</code></a></p>
<p><a href="https://pypi.org/project/python-fontbro/#set_style_flags"><code>set_style_flags</code></a></p>
<p><a href="https://pypi.org/project/python-fontbro/#set_style_flags_by_subfamily_name"><code>set_style_flags_by_subfamily_name</code></a></p>
<p><a href="https://pypi.org/project/python-fontbro/#subset"><code>subset</code></a></p>
<p><a href="https://pypi.org/project/python-fontbro/#to_sliced_variable"><code>to_sliced_variable</code></a></p>
<p><a href="https://pypi.org/project/python-fontbro/#to_static"><code>to_static</code></a></p>
<h2 class="mume-header" id="method-details">Method Details</h2>

<h3 class="mume-header" id="clone">clone</h3>

<pre data-role="codeBlock" data-info="python" class="language-python"><span class="token triple-quoted-string string">"""
Creates a new Font instance reading the same binary file.
"""</span>
font_clone <span class="token operator">=</span> font<span class="token punctuation">.</span>clone<span class="token punctuation">(</span><span class="token punctuation">)</span>
</pre><h3 class="mume-header" id="close">close</h3>

<pre data-role="codeBlock" data-info="python" class="language-python"><span class="token triple-quoted-string string">"""  
Close the wrapped TTFont instance.  
"""</span>  
font<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</pre><h3 class="mume-header" id="get_characters">get_characters</h3>

<pre data-role="codeBlock" data-info="python" class="language-python"><span class="token triple-quoted-string string">"""  
Gets the font characters.

:param ignore\_blank: If True, characters without contours will not be returned.  
:type ignore\_blank: bool

:returns: The characters.  
:rtype: generator of dicts

:raises TypeError: If it's not possible to find the 'best' unicode cmap dict in the font.  
"""</span>  
chars <span class="token operator">=</span> font<span class="token punctuation">.</span>get\_characters<span class="token punctuation">(</span>ignore\_blank<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
</pre><h3 class="mume-header" id="get_characters_count">get_characters_count</h3>

<pre data-role="codeBlock" data-info="python" class="language-python"><span class="token triple-quoted-string string">"""  
Gets the font characters count.

:param ignore_blank: If True, characters without contours will not be counted.  
:type ignore_blank: bool

:returns: The characters count.  
:rtype: int  
"""</span>  
chars_count <span class="token operator">=</span> font<span class="token punctuation">.</span>get_characters_count<span class="token punctuation">(</span>ignore_blank<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
</pre><h3 class="mume-header" id="get_features">get_features</h3>

<pre data-role="codeBlock" data-info="python" class="language-python"><span class="token triple-quoted-string string">"""  
Gets the font opentype features.

:returns: The features.  
:rtype: list of dict  
"""</span>  
features <span class="token operator">=</span> font<span class="token punctuation">.</span>get_features<span class="token punctuation">(</span><span class="token punctuation">)</span>
</pre><h3 class="mume-header" id="get_features_tags">get_features_tags</h3>

<pre data-role="codeBlock" data-info="python" class="language-python"><span class="token triple-quoted-string string">"""  
Gets the font opentype features tags.

:returns: The features tags list.  
:rtype: list of str  
"""</span>  
features_tags <span class="token operator">=</span> font<span class="token punctuation">.</span>get_features_tags<span class="token punctuation">(</span><span class="token punctuation">)</span>
</pre><h3 class="mume-header" id="get_fingerprint">get_fingerprint</h3>

<pre data-role="codeBlock" data-info="python" class="language-python"><span class="token triple-quoted-string string">"""  
Gets the font fingerprint: an hash calculated from an image representation of the font.  
Changing the text option affects the returned fingerprint.

:param text: The text used for generating the fingerprint, default value: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".  
:type text: str  
:returns: The fingerprint hash.  
:rtype: imagehash.ImageHash  
"""</span>  
<span class="token builtin">hash</span> <span class="token operator">=</span> font<span class="token punctuation">.</span>get_fingerprint<span class="token punctuation">(</span><span class="token punctuation">)</span>
</pre><h3 class="mume-header" id="get_fingerprint_match">get_fingerprint_match</h3>

<pre data-role="codeBlock" data-info="python" class="language-python"><span class="token triple-quoted-string string">"""  
Gets the fingerprint match between this font and another one.  
by checking if their fingerprints are equal (difference &lt;= tolerance).

:param other: The other font, can be either a filepath or a Font instance.  
:type other: str or Font  
:param tolerance: The diff tolerance, default 3.  
:type tolerance: int  
:param text: The text used for generating the fingerprint, default value: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".  
:type text: str  
:returns: A tuple containing the match info (match, diff, hash, other_hash).  
:rtype: tuple  
"""</span>  
match<span class="token punctuation">,</span> diff<span class="token punctuation">,</span> <span class="token builtin">hash</span><span class="token punctuation">,</span> other_hash <span class="token operator">=</span> font<span class="token punctuation">.</span>get_fingerprint_match<span class="token punctuation">(</span>other<span class="token operator">=</span><span class="token string">"other_font.ttf"</span><span class="token punctuation">,</span> tolerance<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>
</pre><h3 class="mume-header" id="get_format">get_format</h3>

<pre data-role="codeBlock" data-info="python" class="language-python"><span class="token triple-quoted-string string">"""  
Gets the font format: otf, ttf, woff, woff2.

:param ignore_flavor: If True, the original format without compression will be returned.  
:type ignore_flavor: bool

:returns: The format.  
:rtype: str or None  
"""</span>  
<span class="token builtin">format</span> <span class="token operator">=</span> font<span class="token punctuation">.</span>get_format<span class="token punctuation">(</span>ignore_flavor<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
</pre><h3 class="mume-header" id="get_glyphs">get_glyphs</h3>

<pre data-role="codeBlock" data-info="python" class="language-python"><span class="token triple-quoted-string string">"""  
Gets the font glyphs and their own composition.

:returns: The glyphs.  
:rtype: generator of dicts  
"""</span>  
glyphs <span class="token operator">=</span> font<span class="token punctuation">.</span>get_glyphs<span class="token punctuation">(</span><span class="token punctuation">)</span>
</pre><h3 class="mume-header" id="get_glyphs_count">get_glyphs_count</h3>

<pre data-role="codeBlock" data-info="python" class="language-python"><span class="token triple-quoted-string string">"""  
Gets the font glyphs count.

:returns: The glyphs count.  
:rtype: int  
"""</span>  
glyphs_count <span class="token operator">=</span> font<span class="token punctuation">.</span>get_glyphs_count<span class="token punctuation">(</span><span class="token punctuation">)</span>
</pre><h3 class="mume-header" id="get_image">get_image</h3>

<pre data-role="codeBlock" data-info="python" class="language-python"><span class="token triple-quoted-string string">"""  
Gets an image representation of the font rendering  
some text using the given options.

:param text: The text rendered in the image  
:type text: str  
:param size: The font size  
:type size: int  
:param color: The text color  
:type color: tuple  
:param background\_color: The background color  
:type background\_color: tuple  
"""</span>  
img <span class="token operator">=</span> font<span class="token punctuation">.</span>get\_image<span class="token punctuation">(</span>text<span class="token operator">=</span><span class="token string">"Hello!"</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">48</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span> background\_color<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</pre><h3 class="mume-header" id="get_italic_angle">get_italic_angle</h3>

<pre data-role="codeBlock" data-info="python" class="language-python"><span class="token triple-quoted-string string">"""  
Gets the font italic angle.

:returns: The angle value including backslant, italic and roman flags.  
:rtype: dict or None  
"""</span>  
italic\_angle <span class="token operator">=</span> font<span class="token punctuation">.</span>get\_italic\_angle<span class="token punctuation">(</span><span class="token punctuation">)</span>
</pre><h3 class="mume-header" id="get_name">get_name</h3>

<pre data-role="codeBlock" data-info="python" class="language-python"><span class="token triple-quoted-string string">"""  
Gets the name by its identifier from the font name table.

:param key: The name id or key (eg. "family\_name")  
:type key: int or str

:returns: The name.  
:rtype: str or None

:raises KeyError: if the key is not a valid name key/id  
"""</span>  
family\_name <span class="token operator">=</span> font<span class="token punctuation">.</span>get\_name<span class="token punctuation">(</span>key<span class="token operator">=</span>Font<span class="token punctuation">.</span>NAME\_FAMILY\_NAME<span class="token punctuation">)</span>
</pre><h3 class="mume-header" id="get_names">get_names</h3>

<pre data-role="codeBlock" data-info="python" class="language-python"><span class="token triple-quoted-string string">"""  
Gets the names records mapped by their property name.

:returns: The names.  
:rtype: dict  
"""</span>  
names <span class="token operator">=</span> font<span class="token punctuation">.</span>get\_names<span class="token punctuation">(</span><span class="token punctuation">)</span>
</pre><h3 class="mume-header" id="get_style_flag">get_style_flag</h3>

<pre data-role="codeBlock" data-info="python" class="language-python"><span class="token triple-quoted-string string">"""  
Gets the style flag reading OS/2 and macStyle tables.

:param key: The key  
:type key: string

:returns: The style flag.  
:rtype: bool  
"""</span>  
flag <span class="token operator">=</span> font<span class="token punctuation">.</span>get\_style\_flag<span class="token punctuation">(</span>Font<span class="token punctuation">.</span>STYLE\_FLAG\_BOLD<span class="token punctuation">)</span>
</pre><h3 class="mume-header" id="get_style_flags">get_style_flags</h3>

<pre data-role="codeBlock" data-info="python" class="language-python"><span class="token triple-quoted-string string">"""  
Gets the style flags reading OS/2 and macStyle tables.

:returns: The dict representing the style flags.  
:rtype: dict  
"""</span>  
flags <span class="token operator">=</span> font<span class="token punctuation">.</span>get\_style\_flags<span class="token punctuation">(</span><span class="token punctuation">)</span>
</pre><h3 class="mume-header" id="get_ttfont">get_ttfont</h3>

<pre data-role="codeBlock" data-info="python" class="language-python"><span class="token triple-quoted-string string">"""  
Gets the wrapped TTFont instance.

:returns: The TTFont instance.  
:rtype: TTFont  
"""</span>  
ttfont <span class="token operator">=</span> font<span class="token punctuation">.</span>get\_ttfont<span class="token punctuation">(</span><span class="token punctuation">)</span>
</pre><h3 class="mume-header" id="get_unicode_block_by_name">get_unicode_block_by_name</h3>

<pre data-role="codeBlock" data-info="python" class="language-python"><span class="token triple-quoted-string string">"""  
Gets the unicode block by name (name is case-insensitive and ignores "-").

:param name: The name  
:type name: str

:returns: The unicode block dict if the name is valid, None otherwise.  
:rtype: dict or None  
"""</span>  
block <span class="token operator">=</span> font<span class="token punctuation">.</span>get\_unicode\_block\_by\_name<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"Basic Latin"</span><span class="token punctuation">)</span>
</pre><h3 class="mume-header" id="get_unicode_blocks">get_unicode_blocks</h3>

<pre data-role="codeBlock" data-info="python" class="language-python"><span class="token triple-quoted-string string">"""  
Gets the unicode blocks and their coverage.  
Only blocks with coverage &gt;= coverage\_threshold (0.0 &lt;= coverage\_threshold &lt;= 1.0) will be returned.

:param coverage\_threshold: The minumum required coverage for a block to be returned.  
:type coverage\_threshold: float

:returns: The list of unicode blocks.  
:rtype: list of dicts  
"""</span>  
blocks <span class="token operator">=</span> font<span class="token punctuation">.</span>get\_unicode\_blocks<span class="token punctuation">(</span>coverage\_threshold<span class="token operator">=</span><span class="token number">0.00001</span><span class="token punctuation">)</span>
</pre><h3 class="mume-header" id="get_unicode_script_by_name">get_unicode_script_by_name</h3>

<pre data-role="codeBlock" data-info="python" class="language-python"><span class="token triple-quoted-string string">"""  
Gets the unicode script by name/tag (name/tag is case-insensitive and ignores "-").

:param name: The name  
:type name: str

:returns: The unicode script dict if the name/tag is valid, None otherwise.  
:rtype: dict or None  
"""</span>  
script <span class="token operator">=</span> font<span class="token punctuation">.</span>get\_unicode\_script\_by\_name<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"Latn"</span><span class="token punctuation">)</span>
</pre><h3 class="mume-header" id="get_unicode_scripts">get_unicode_scripts</h3>

<pre data-role="codeBlock" data-info="python" class="language-python"><span class="token triple-quoted-string string">"""  
Gets the unicode scripts and their coverage.  
Only scripts with coverage &gt;= coverage\_threshold (0.0 &lt;= coverage\_threshold &lt;= 1.0) will be returned.

:param coverage\_threshold: The minumum required coverage for a script to be returned.  
:type coverage\_threshold: float

:returns: The list of unicode scripts.  
:rtype: list of dicts  
"""</span>  
scripts <span class="token operator">=</span> font<span class="token punctuation">.</span>get\_unicode\_scripts<span class="token punctuation">(</span>coverage\_threshold<span class="token operator">=</span><span class="token number">0.00001</span><span class="token punctuation">)</span>
</pre><h3 class="mume-header" id="get_variable_axes">get_variable_axes</h3>

<pre data-role="codeBlock" data-info="python" class="language-python"><span class="token triple-quoted-string string">"""  
Gets the font variable axes.

:returns: The list of axes if the font is a variable font otherwise None.  
:rtype: list of dict or None  
"""</span>  
axes <span class="token operator">=</span> font<span class="token punctuation">.</span>get\_variable\_axes<span class="token punctuation">(</span><span class="token punctuation">)</span>
</pre><h3 class="mume-header" id="get_variable_axes_tags">get_variable_axes_tags</h3>

<pre data-role="codeBlock" data-info="python" class="language-python"><span class="token triple-quoted-string string">"""  
Gets the variable axes tags.

:returns: The variable axis tags.  
:rtype: list or None  
"""</span>  
axes\_tags <span class="token operator">=</span> font<span class="token punctuation">.</span>get\_variable\_axes\_tags<span class="token punctuation">(</span><span class="token punctuation">)</span>
</pre><h3 class="mume-header" id="get_variable_axis_by_tag">get_variable_axis_by_tag</h3>

<pre data-role="codeBlock" data-info="python" class="language-python"><span class="token triple-quoted-string string">"""  
Gets a variable axis by tag.

:param tag: The tag  
:type tag: string

:returns: The variable axis by tag.  
:rtype: dict or None  
"""</span>  
axis <span class="token operator">=</span> font<span class="token punctuation">.</span>get\_variable\_axis\_by\_tag<span class="token punctuation">(</span>tag<span class="token operator">=</span><span class="token string">"wght"</span><span class="token punctuation">)</span>
</pre><h3 class="mume-header" id="get_variable_instances">get_variable_instances</h3>

<pre data-role="codeBlock" data-info="python" class="language-python"><span class="token triple-quoted-string string">"""  
Gets the variable instances.

:returns: The list of instances if the font is a variable font otherwise None.  
:rtype: list of dict or None  
"""</span>  
instances <span class="token operator">=</span> font<span class="token punctuation">.</span>get\_variable\_instances<span class="token punctuation">(</span><span class="token punctuation">)</span>
</pre><h3 class="mume-header" id="get_variable_instance_closest_to_coordinates">get_variable_instance_closest_to_coordinates</h3>

<pre data-role="codeBlock" data-info="python" class="language-python"><span class="token triple-quoted-string string">"""  
Gets the variable instance closest to coordinates.  
eg. coordinates = {"wght": 1000, "slnt": 815, "wdth": 775}

:param coordinates: The coordinates  
:type coordinates: dict

:returns: The variable instance closest to coordinates.  
:rtype: dict or None  
"""</span>  
instance <span class="token operator">=</span> font<span class="token punctuation">.</span>get\_variable\_instance\_closest\_to\_coordinates<span class="token punctuation">(</span>coordinates<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"wght"</span><span class="token punctuation">:</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token string">"slnt"</span><span class="token punctuation">:</span> <span class="token number">815</span><span class="token punctuation">,</span> <span class="token string">"wdth"</span><span class="token punctuation">:</span> <span class="token number">775</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</pre><h3 class="mume-header" id="get_version">get_version</h3>

<pre data-role="codeBlock" data-info="python" class="language-python"><span class="token triple-quoted-string string">"""  
Gets the font version.

:returns: The font version value.  
:rtype: float  
"""</span>  
version <span class="token operator">=</span> font<span class="token punctuation">.</span>get\_version<span class="token punctuation">(</span><span class="token punctuation">)</span>
</pre><h3 class="mume-header" id="get_weight">get_weight</h3>

<pre data-role="codeBlock" data-info="python" class="language-python"><span class="token triple-quoted-string string">"""  
Gets the font weight value and name.

:returns: The weight name and value.  
:rtype: dict or None  
"""</span>  
weight <span class="token operator">=</span> font<span class="token punctuation">.</span>get\_weight<span class="token punctuation">(</span><span class="token punctuation">)</span>
</pre><h3 class="mume-header" id="get_width">get_width</h3>

<pre data-role="codeBlock" data-info="python" class="language-python"><span class="token triple-quoted-string string">"""  
Gets the font width value and name.

:returns: The width name and value.  
:rtype: dict or None  
"""</span>  
width <span class="token operator">=</span> font<span class="token punctuation">.</span>get\_width<span class="token punctuation">(</span><span class="token punctuation">)</span>
</pre><h3 class="mume-header" id="is_static">is_static</h3>

<pre data-role="codeBlock" data-info="python" class="language-python"><span class="token triple-quoted-string string">"""  
Determines if the font is a static font.

:returns: True if static font, False otherwise.  
:rtype: bool  
"""</span>  
static <span class="token operator">=</span> font<span class="token punctuation">.</span><span class="token keyword keyword-is">is</span>\_static<span class="token punctuation">(</span><span class="token punctuation">)</span>
</pre><h3 class="mume-header" id="is_variable">is_variable</h3>

<pre data-role="codeBlock" data-info="python" class="language-python"><span class="token triple-quoted-string string">"""  
Determines if the font is a variable font.

:returns: True if variable font, False otherwise.  
:rtype: bool  
"""</span>  
variable <span class="token operator">=</span> font<span class="token punctuation">.</span><span class="token keyword keyword-is">is</span>\_variable<span class="token punctuation">(</span><span class="token punctuation">)</span>
</pre><h3 class="mume-header" id="rename">rename</h3>

<pre data-role="codeBlock" data-info="python" class="language-python"><span class="token triple-quoted-string string">"""  
Renames the font names records (1, 2, 4, 6, 16, 17) according to  
the given family\_name and style\_name (subfamily\_name).

If family\_name is not defined it will be auto-detected.  
If style\_name is not defined it will be auto-detected.

:param family\_name: The family name  
:type family\_name: str  
:param style\_name: The style name  
:type style\_name: str  
:param style\_flags: if True the style flags will be updated by subfamily name  
:type style\_flags: bool

:raises ValueError: if the computed PostScript-name is longer than 63 characters.  
"""</span>  
font<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>family\_name<span class="token operator">=</span><span class="token string">"My Font New"</span><span class="token punctuation">,</span> style\_name<span class="token operator">=</span><span class="token string">"Bold Italic"</span><span class="token punctuation">)</span>
</pre><h3 class="mume-header" id="save">save</h3>

<pre data-role="codeBlock" data-info="python" class="language-python"><span class="token triple-quoted-string string">"""  
Saves the font at filepath.

:param filepath: The filepath, if None the source filepath will be used  
:type filepath: str or None  
:param overwrite: The overwrite, if True the source font file can be overwritten  
:type overwrite: bool

:returns: The filepath where the font has been saved to.  
:rtype: str

:raises ValueError: If the filepath is the same of the source font and overwrite is not allowed.  
"""</span>  
saved\_font\_path <span class="token operator">=</span> font<span class="token punctuation">.</span>save<span class="token punctuation">(</span>filepath<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> overwrite<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
</pre><h3 class="mume-header" id="save_as_woff">save_as_woff</h3>

<pre data-role="codeBlock" data-info="python" class="language-python"><span class="token triple-quoted-string string">"""  
Saves font as woff.

:param filepath: The filepath  
:type filepath: str  
:param overwrite: The overwrite, if True the source font file can be overwritten  
:type overwrite: bool

:returns: The filepath where the font has been saved to.  
:rtype: str  
"""</span>  
saved\_font\_path <span class="token operator">=</span> font<span class="token punctuation">.</span>save\_as\_woff<span class="token punctuation">(</span>filepath<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> overwrite<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
</pre><h3 class="mume-header" id="save_as_woff2">save_as_woff2</h3>

<pre data-role="codeBlock" data-info="python" class="language-python"><span class="token triple-quoted-string string">"""  
Saves font as woff2.

:param filepath: The filepath  
:type filepath: str  
:param overwrite: The overwrite, if True the source font file can be overwritten  
:type overwrite: bool

:returns: The filepath where the font has been saved to.  
:rtype: str  
"""</span>  
saved\_font\_path <span class="token operator">=</span> font<span class="token punctuation">.</span>save\_as\_woff2<span class="token punctuation">(</span>filepath<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> overwrite<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
</pre><h3 class="mume-header" id="set_name">set_name</h3>

<pre data-role="codeBlock" data-info="python" class="language-python"><span class="token triple-quoted-string string">"""  
Sets the name by its identifier in the font name table.

:param key: The name id or key (eg. "family\_name")  
:type key: int or str  
:param value: The value  
:type value: str  
"""</span>  
font<span class="token punctuation">.</span><span class="token builtin">set</span>\_name<span class="token punctuation">(</span>Font<span class="token punctuation">.</span>NAME\_FAMILY\_NAME<span class="token punctuation">,</span> <span class="token string">"Family Name Renamed"</span><span class="token punctuation">)</span>
</pre><h3 class="mume-header" id="set_names">set_names</h3>

<pre data-role="codeBlock" data-info="python" class="language-python"><span class="token triple-quoted-string string">"""  
Sets the names by their identifier in the name table.

:param names: The names  
:type names: dict  
"""</span>  
font<span class="token punctuation">.</span><span class="token builtin">set</span>\_names<span class="token punctuation">(</span>names<span class="token operator">=</span><span class="token punctuation">{</span>  
Font<span class="token punctuation">.</span>NAME\_FAMILY\_NAME<span class="token punctuation">:</span> <span class="token string">"Family Name Renamed"</span><span class="token punctuation">,</span>  
Font<span class="token punctuation">.</span>NAME\_SUBFAMILY\_NAME<span class="token punctuation">:</span> <span class="token string">"Regular Renamed"</span><span class="token punctuation">,</span>  
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</pre><h3 class="mume-header" id="set_style_flag">set_style_flag</h3>

<pre data-role="codeBlock" data-info="python" class="language-python"><span class="token triple-quoted-string string">"""  
Sets the style flag.

:param key: The flag key  
:type key: str  
:param value: The value  
:type value: bool  
"""</span>  
font<span class="token punctuation">.</span><span class="token builtin">set</span>\_style\_flag<span class="token punctuation">(</span>Font<span class="token punctuation">.</span>STYLE\_FLAG\_BOLD<span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>
</pre><h3 class="mume-header" id="set_style_flags">set_style_flags</h3>

<pre data-role="codeBlock" data-info="python" class="language-python"><span class="token triple-quoted-string string">"""  
Sets the style flags, flags set to None will be ignored.

:param bold: The bold flag value.  
:type bold: bool or None  
:param italic: The italic flag value.  
:type italic: bool or None  
:param underline: The underline flag value.  
:type underline: bool or None  
:param outline: The outline flag value.  
:type outline: bool or None  
"""</span>  
font<span class="token punctuation">.</span><span class="token builtin">set</span>\_style\_flags<span class="token punctuation">(</span>regular<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> bold<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> italic<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> outline<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> underline<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>
</pre><h3 class="mume-header" id="set_style_flags_by_subfamily_name">set_style_flags_by_subfamily_name</h3>

<pre data-role="codeBlock" data-info="python" class="language-python"><span class="token triple-quoted-string string">"""  
Sets the style flags by the subfamily name value.  
The subfamily values should be "regular", "italic", "bold" or "bold italic"  
to allow this method to work properly.  
"""</span>  
font<span class="token punctuation">.</span><span class="token builtin">set</span>\_style\_flags\_by\_subfamily\_name<span class="token punctuation">(</span><span class="token punctuation">)</span>
</pre><h3 class="mume-header" id="subset">subset</h3>

<pre data-role="codeBlock" data-info="python" class="language-python"><span class="token triple-quoted-string string">"""  
Subsets the font using the given options (unicodes or glyphs or text),  
it is possible to pass also subsetter options, more info here:  
https://github.com/fonttools/fonttools/blob/main/Lib/fontTools/subset/\_\_init\_\_.py

:param unicodes: The unicodes  
:type unicodes: str or list  
:param glyphs: The glyphs  
:type glyphs: list  
:param text: The text  
:type text: str  
:param options: The subsetter options  
:type options: dict  
"""</span>  
font<span class="token punctuation">.</span>subset<span class="token punctuation">(</span>unicodes<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> glyphs<span class="token operator">=</span>\<span class="token punctuation">[</span>\<span class="token punctuation">]</span><span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> \<span class="token operator">*</span>\<span class="token operator">*</span>options<span class="token punctuation">)</span>
</pre><h3 class="mume-header" id="to_sliced_variable">to_sliced_variable</h3>

<pre data-role="codeBlock" data-info="python" class="language-python"><span class="token triple-quoted-string string">"""  
Converts the variable font to a partial one slicing the variable axes at the given coordinates.  
If an axis value is not specified, the axis will be left untouched.  
If an axis min and max values are equal, the axis will be pinned.

:param coordinates: The coordinates dictionary, each item value must be tuple/list/dict  
(with 'min', 'default' and 'max' keys) for slicing or float/int for pinning, eg.  
{'wdth':100, 'wght':(100,600), 'ital':(30,65,70)} or  
{'wdth':100, 'wght':\[100,600\], 'ital':\[30,65,70\]} or  
{'wdth':100, 'wght':{'min':100,'max':600}, 'ital':{'min':30,'default':65,'max':70}}  
:type coordinates: dict  
:param options: The options for the fontTools.varLib.instancer  
:type options: dictionary

:raises TypeError: If the font is not a variable font  
:raises ValueError: If the coordinates are not defined (empty)  
:raises ValueError: If the coordinates axes are all pinned  
"""</span>  
font<span class="token punctuation">.</span>to\_sliced\_variable<span class="token punctuation">(</span>coordinates<span class="token punctuation">,</span> \<span class="token operator">*</span>\<span class="token operator">*</span>options<span class="token punctuation">)</span>
</pre><h3 class="mume-header" id="to_static">to_static</h3>

<pre data-role="codeBlock" data-info="python" class="language-python"><span class="token triple-quoted-string string">"""  
Converts the variable font to a static one pinning the variable axes at the given coordinates.  
If an axis value is not specified, the axis will be pinned at its default value.  
If coordinates are not specified each axis will be pinned at its default value.

:param coordinates: The coordinates, eg. {"wght":500, "ital":50}  
:type coordinates: dict or None  
:param style\_name: The existing instance style name, eg. 'Black'  
:type style\_name: str or None  
:param options: The options for the fontTools.varLib.instancer  
:type options: dictionary

:raises TypeError: If the font is not a variable font  
:raises ValueError: If the coordinates axes are not all pinned  
"""</span>  
font<span class="token punctuation">.</span>to\_static<span class="token punctuation">(</span>coordinates<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> \<span class="token operator">*</span>\<span class="token operator">*</span>options<span class="token punctuation">)</span>
</pre><h2 class="mume-header" id="testing">Testing</h2>

<pre data-role="codeBlock" data-info="python" class="language-python">\# clone repository  
git clone https<span class="token punctuation">:</span><span class="token operator">//</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>fabiocaccamo<span class="token operator">/</span>python<span class="token operator">-</span>fontbro<span class="token punctuation">.</span>git <span class="token operator">&amp;</span><span class="token operator">&amp;</span> cd python<span class="token operator">-</span>fontbro

\# create virtualenv <span class="token keyword keyword-and">and</span> activate it  
python <span class="token operator">-</span>m venv venv <span class="token operator">&amp;</span><span class="token operator">&amp;</span> <span class="token punctuation">.</span> venv<span class="token operator">/</span><span class="token builtin">bin</span><span class="token operator">/</span>activate

\# upgrade pip  
python <span class="token operator">-</span>m pip install <span class="token operator">-</span><span class="token operator">-</span>upgrade pip

\# install requirements  
python <span class="token operator">-</span>m pip install <span class="token operator">-</span>r requirements<span class="token punctuation">.</span>txt <span class="token operator">-</span>r requirements<span class="token operator">-</span>test<span class="token punctuation">.</span>txt

\# install pre<span class="token operator">-</span>commit to run formatters <span class="token keyword keyword-and">and</span> linters  
pre<span class="token operator">-</span>commit install <span class="token operator">-</span><span class="token operator">-</span>install<span class="token operator">-</span>hooks

\# run tests using tox  
tox

\# <span class="token keyword keyword-or">or</span> run tests using unittest  
python <span class="token operator">-</span>m unittest
</pre>
      </div>
      
      
    
    
    
    
    
    
    
    
  </body></html>